def choiceArray = ['ABANK', 'BBANK', 'CBANK']

pipeline {
    agent any
    environment {
        CONFIG_FILE = './cloudfront/configuration.json'
    }
    parameters {
        choice(name: 'SWITCHING_TO', choices: ['ACTIVE', 'FAILOVER'], description: 'Select the environment')
        choice(name: 'BANK_ID', choices: choiceArray, description: 'Select the Bank ID')

        password(name: 'AWS_ACCESS_KEY_ID', defaultValue: '', description: 'AWS_ACCESS_KEY_ID')
        password(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'AWS_SECRET_ACCESS_KEY')
        password(name: 'AWS_SESSION_TOKEN', defaultValue: '', description: 'AWS_SESSION_TOKEN')

        text(name: 'PROXY_NAME', defaultValue: '', description: 'Enter the rds proxy name')

        booleanParam(name: 'FORCE_DELETE', defaultValue: false, description: 'Check this to set force_delete to true')
        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Check this to run the pipeline in dry run mode')
        booleanParam(name: 'PROCESS_CURRENT_ENV', defaultValue: false, description: 'Check this to process current environment')
    }
    stages {
        stage('Install Node.js and Packages') {
            steps {
                sh 'npm install aws-sdk'
                sh 'npm install'
            
            }
        }

        stage('Process Configuration for Failover') {
            steps {
                script {
                    def command = "node rds/run-rds.js"

                    env.AWS_ACCESS_KEY_ID = params.AWS_ACCESS_KEY_ID
                    env.AWS_SECRET_ACCESS_KEY = params.AWS_SECRET_ACCESS_KEY
                    env.AWS_SESSION_TOKEN = params.AWS_SESSION_TOKEN

                    // Set environment variables
                    env.PROXY_NAME = params.PROXY_NAME
                    env.FORCE_DELETE = params.FORCE_DELETE
                    env.BANK_ID = params.BANK_ID
                    env.SWITCHING_TO = params.SWITCHING_TO

                    if (params.DRY_RUN) 
                        command += " -dr"
                    
                    if (params.PROCESS_CURRENT_ENV) 
                        command += " -pce"
                    
                    sh command
                }
            }
        }

        stage('User Input for Active Environment') {
            when {
                expression { return params.SWITCHING_TO == 'ACTIVE' }
            }
            steps {
                script {
                    env.USER_ACTION = input message: 'Please choose an option:', ok: 'Continue',
                        parameters: [
                            choice(name: 'ACTION', choices: ['Delete RDS', 'Abort'], description: 'Select the action to perform'),
                        ]
                    
                    echo "User selected action: ${env.USER_ACTION}"
                }
            }
        }

        stage('Deploy') {
            when {
                expression { return env.USER_ACTION == 'Delete RDS' && params.SWITCHING_TO == 'ACTIVE' }
            }
            steps {
                script {
                    echo 'Deleting RDS...'
                    def deleteCommand = "node rds/run-rds.js -d"
                    sh deleteCommand
                }
            }
        }

        stage('Abort') {
            when {
                expression { return env.USER_ACTION == 'Abort' && params.SWITCHING_TO == 'ACTIVE' }
            }
            steps {
                echo 'RDS is not deleted.'
            }
        }
    }
}
