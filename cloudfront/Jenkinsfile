def choiceArray = ['ALL','E2T8CH440GV7PL', 'E3QX5YDI77LAWN']

pipeline {
    agent any
    environment {
        CONFIG_FILE = './cloudfront/configuration.json'
    }
    parameters {
        choice(name: 'SWITCHING_TO', choices: ['ACTIVE', 'FAILOVER'], description: 'Select the environment')
        choice(name: 'CLOUDFRONT_ID', choices: choiceArray, description: 'Select the CloudFront Distribution ID')
        string(name: 'SPECIFIED_CLOUDFRONT_IDS', defaultValue: '', description: 'Specify multiple CloudFront IDs, comma-separated (overrides above choice)')
        password(name: 'AWS_ACCESS_KEY_ID', defaultValue: '', description: 'AWS_ACCESS_KEY_ID')
        password(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'AWS_SECRET_ACCESS_KEY')
        password(name: 'AWS_SESSION_TOKEN', defaultValue: '', description: 'AWS_SESSION_TOKEN')

        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Check this to run the pipeline in dry run mode')
        booleanParam(name: 'PROCESS_CURRENT_ENV', defaultValue: false, description: 'Check this to process current environment')

    }
    stages {
        stage('Install Node.js and Packages') {
            steps {
                sh 'npm install aws-sdk'
                sh 'npm install'
            }
        }

    stage('Load and Process Configuration') {
        steps {
            script {
                // Read the configuration file
                env.AWS_ACCESS_KEY_ID = params.AWS_ACCESS_KEY_ID
                env.AWS_SECRET_ACCESS_KEY = params.AWS_SECRET_ACCESS_KEY
                env.AWS_SESSION_TOKEN = params.AWS_SESSION_TOKEN

                def filteredArray = []
                def command = "node cloudfront/run-cloudfront.js"

                if (params.CLOUDFRONT_ID == 'ALL') 
                    filteredArray = choiceArray.findAll { it != 'ALL' }
                else
                    filteredArray = [params.CLOUDFRONT_ID]
                
                if (params.SPECIFIED_CLOUDFRONT_IDS.isEmpty() && params.CLOUDFRONT_ID != 'ALL')
                    filteredArray = [params.CLOUDFRONT_ID]

                else
                {
                    def keywords = params.SPECIFIED_CLOUDFRONT_IDS.split(',').collect { it.trim() }
                    
                    filteredArray = choiceArray.findAll { item ->
                        keywords.any { keyword -> item.contains(keyword) }
                    }
                    
                }

                // Set environment variables
                env.CLOUDFRONT_IDS = filteredArray
                env.SWITCHING_TO = params.SWITCHING_TO
                // Execute the Node.js script with the current distribution's configuration

                if (params.DRY_RUN) 
                    command += " -dr"
                
                if (params.PROCESS_CURRENT_ENV) 
                    command += " -pce"

                sh command
                } 
            }
        }
    }
}
