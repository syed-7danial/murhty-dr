def  failoverLambdaFunctionArray= ['test-function-waqar']
def  activeLambdaFunctionArray= ['dani-test-function']

pipeline {
    agent any
    environment {
        CONFIG_FILE = './lambda/configuration.json'
    }
    parameters {
        choice(name: 'SWITCHING_TO', choices: ['ACTIVE', 'FAILOVER'], description: 'Select the environment')
        choice(name: 'ACTIVE_LAMBDA_NAME', choices: activeLambdaFunctionArray, description: 'Select the VPN Configuration ID')
        choice(name: 'FAILOVER_LAMBDA_NAME', choices: failoverLambdaFunctionArray, description: 'Select the IP Range')
        text(name: 'ACTIVE_LAMBDA_LIST', defaultValue: '', description: 'Enter the list of BANKs, separated by commas')
        text(name: 'FAILOVER_LAMBDA_LIST', defaultValue: '', description: 'Enter the list of BANKs, separated by commas')

        password(name: 'AWS_ACCESS_KEY_ID', defaultValue: '', description: 'AWS_ACCESS_KEY_ID')
        password(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'AWS_SECRET_ACCESS_KEY')
        password(name: 'AWS_SESSION_TOKEN', defaultValue: '', description: 'AWS_SESSION_TOKEN')

        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Check this to run the pipeline in dry run mode')
        booleanParam(name: 'PROCESS_CURRENT_ENV', defaultValue: false, description: 'Check this to process current environment')

    }

    stages {
        stage('Install Node.js and Packages') {
            steps {
                sh 'npm install aws-sdk'
                sh 'npm install'
            }
        }



        stage('Load and Process Configuration') {
            steps {
                script {
                    env.AWS_ACCESS_KEY_ID = params.AWS_ACCESS_KEY_ID
                    env.AWS_SECRET_ACCESS_KEY = params.AWS_SECRET_ACCESS_KEY
                    env.AWS_SESSION_TOKEN = params.AWS_SESSION_TOKEN
                    env.SWITCHING_TO = params.SWITCHING_TO

                    // Split the keywords string into an array
                    def filteredArray = ''
                    def command = 'node lambda/run-lambda.js'
                    if (params.ACTIVE_LAMBDA_LIST.isEmpty())
                        env.ACTIVE_LAMBA_NAMES= [params.ACTIVE_LAMBDA_NAME]
                    else
                        env.ACTIVE_LAMBA_NAMES= [params.ACTIVE_LAMBDA_LIST]

                    if (params.FAILOVER_LAMBDA_LIST.isEmpty())
                        env.FAILOVER_LAMBA_NAMES= [params.FAILOVER_LAMBDA_NAME]
                    else
                        env.FAILOVER_LAMBA_NAMES= [params.FAILOVER_LAMBDA_LIST]


                    if (params.DRY_RUN) {
                        command += ' -dr'
                    }
                    if (params.PROCESS_CURRENT_ENV) {
                        command += ' -pce'
                    }
                    sh command

            // }
            }
        }
    }
}
}
