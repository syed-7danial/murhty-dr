def choiceArray = ['ABANK--0.0.0.0/8', 'ABANK--0.0.0.0/16', 'BBANK--0.0.0.0/8', 'ABANK--0.0.0.0/16', 'CBANK--0.0.0.0/16', 'CBANK--0.0.0.0/24']

pipeline {
    agent any
    environment {
        CONFIG_FILE = './vpn_endpoint/configuration.json'
    }
    parameters {
        choice(name: 'SWITCHING_TO', choices: ['ACTIVE', 'FAILOVER'], description: 'Select the environment')
        choice(name: 'VPN_CONFIGURATION_ID', choices: ['ABANK', 'BBANK', 'CBANK'], description: 'Select the VPN Configuration ID')
        choice(name: 'IP_RANGE', choices: choiceArray, description: 'Select the IP Range')
        text(name: 'BANK_LIST', defaultValue: '', description: 'Enter the list of BANKs, separated by commas')
        password(name: 'AWS_ACCESS_KEY_ID', defaultValue: '', description: 'AWS_ACCESS_KEY_ID')
        password(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'AWS_SECRET_ACCESS_KEY')
        password(name: 'AWS_SESSION_TOKEN', defaultValue: '', description: 'AWS_SESSION_TOKEN')

        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Check this to run the pipeline in dry run mode')
        booleanParam(name: 'PROCESS_CURRENT_ENV', defaultValue: false, description: 'Check this to process current environment')
    }

    stages {
        stage('Install Node.js and Packages') {
            steps {
                sh 'npm install aws-sdk'
                sh 'npm install'
            }
        }



        stage('Load and Process Configuration') {
            steps {
                script {
                    env.AWS_ACCESS_KEY_ID = params.AWS_ACCESS_KEY_ID
                    env.AWS_SECRET_ACCESS_KEY = params.AWS_SECRET_ACCESS_KEY
                    env.AWS_SESSION_TOKEN = params.AWS_SESSION_TOKEN

                    // Split the keywords string into an array
                    def filteredArray = ''
                    def command = 'node vpn-endpoint/run-vpn.js'
                    if (params.BANK_LIST.isEmpty()) {
                        filteredArray = params.IP_RANGE
                    }
                    else {
                        def keywords = params.BANK_LIST.split(',').collect { it.trim() }
                        filteredArray = choiceArray.findAll { item ->
                            keywords.any { keyword -> item.contains(keyword) }
                        }
                    }
                        env.BANK_LIST = filteredArray
                        echo 'filteredArray'
                        echo "${filteredArray}"
                        env.SWITCHING_TO = params.SWITCHING_TO
                        env.VPN_CONFIGURATION_ID = params.VPN_CONFIGURATION_ID
                        echo "Filtered Array: ${filteredArray}"

                        if (params.DRY_RUN) {
                            command += ' -dr'
                        }
                        if (params.PROCESS_CURRENT_ENV) {
                            command += ' -pce'
                        }
                        sh command

            // }
            }
        }
    }
}
}
